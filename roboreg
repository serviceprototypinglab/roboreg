#!/usr/bin/env python3
#
# Roboreg - A service registry and device manager for fleets of robots
# Copyright (C) 2016 Zürcher Hochschule für Angewandte Wissenschaften
# https://blog.zhaw.ch/icclab/category/research-approach/themes/cloud-robotics/

import urllib.request
import urllib.parse
import json
import sys
import time
import pickle
import hashlib
import os
import configparser

class Robot:
	def __init__(self, name, capabilities, timestamp=time.time(), properties=None):
		self.name = name
		self.capabilities = capabilities
		self.timestamp = timestamp
		self.properties = properties
		self.propertytimestamp = timestamp

	def _decay(self, timestamp):
		t = time.time()
		decay = "***"
		if t - timestamp > 10:
			decay = " **"
		if t - timestamp > 100:
			decay = "  *"
		if t - timestamp > 1000:
			decay = "   "
		return decay

	def __str__(self):
		capsort = list(self.capabilities.keys())[:]
		capsort.sort()
		capstr = hashlib.sha1(str(capsort).encode("utf-8")).hexdigest()[:6]
		rstr = "Robot {:s} / t={:d} / h={:s} [{:s}]".format(self.name, int(self.timestamp), capstr, self._decay(self.timestamp))
		return "\x1b[33m\x1b[1m{:s}\x1b[0m".format(rstr)

	def printcapabilities(self):
		for capability in self.capabilities:
			capstr = "- {:s} / {:s}".format(capability, ("available", "blocked")[self.capabilities[capability]])
			if self.capabilities[capability]:
				col = "\x1b[31m"
			else:
				col = "\x1b[32m"
			print("{:s}{:s}\x1b[0m".format(col, capstr))

	def printproperties(self):
		if not self.properties:
			return
		for property in self.properties:
			propstr = "+ {:s} = {:s} [{:s}]".format(property, str(self.properties[property]), self._decay(self.propertytimestamp))
			print("\x1b[33m{:s}\x1b[0m".format(propstr))

class Roboreg:
	def __init__(self):
		config = configparser.ConfigParser()
		config.read("roboreg.ini")
		if not "reg" in config.sections():
			print("Error: needs valid roboreg.ini.")
			sys.exit(1)
		self.username = config["reg"]["username"]
		self.password = config["reg"]["password"]
		self.eauth = config["reg"]["eauth"]
		self.saltapi = config["reg"]["saltapi"]
		self.cachedir = config["reg"]["cachedir"]

		self.robots = []
		self.filter = None

		self.load()

	def load(self):
		regpath = os.path.join(self.cachedir, "roboregistry")
		try:
			f = open(regpath, "rb")
			self.robots = pickle.load(f)
			f.close()
		except:
			pass

	def save(self, msg="unspecified"):
		os.makedirs(self.cachedir, exist_ok=True)
		if not os.path.isdir(os.path.join(self.cachedir, ".git")):
			os.system("cd '{:s}' && git init -q".format(self.cachedir))
		regpath = os.path.join(self.cachedir, "roboregistry")
		f = open(regpath, "wb")
		pickle.dump(self.robots, f)
		f.close()
		os.system("cd {:s} && git add . && git commit -q -m '{:s}' >/dev/null".format(self.cachedir, msg))

	def neterror(self, reason=None):
		estr = "Network error."
		if reason:
			estr += " [{:s}]".format(str(reason))
		print("\x1b[31m\x1b[1m{:s}\x1b[0m".format(estr))

	def history(self):
		os.system("cd {:s} && git log --pretty='%ar %s'".format(self.cachedir))

	def login(self):
		data = 'username={:s}&password={:s}&eauth={:s}'.format(self.username, self.password, self.eauth)
		try:
			f = urllib.request.urlopen("{:s}/login".format(self.saltapi), bytearray(data, "utf-8"))
		except Exception as e:
			self.neterror(e)
			return
		s = json.loads(f.read().decode("utf-8"))
		token = s["return"][0]["token"]
		return token

	def query(self, data, token):
		headers = {}
		headers["X-Auth-Token"] = token
		#headers["Content-Type"] = "application/json"
		try:
			req = urllib.request.Request(self.saltapi, bytearray(data, "utf-8"), headers)
		except Exception as e:
			self.neterror(e)
			return
		f = urllib.request.urlopen(req)
		s = json.loads(f.read().decode("utf-8"))
		return s

	def makedata(self, func, arglist=[]):
		data = []
		data.append(("client", "local"))
		tgt = "*"
		if self.filter is not None:
			#tgt = self.filter
			# FIXME: according to docs, list would be possible
			tgt = ",".join(self.filter)
		data.append(("tgt", tgt))
		data.append(("fun", func))
		for arg in arglist:
			data.append(("arg", arg))
		data = urllib.parse.urlencode(data)
		return data

	def introspec(self, token=None):
		if not token:
			token = self.login()
		if not token:
			return
		data = self.makedata("ros.introspec")
		#d = {}
		#for k, v in data:
		#	d[k] = v
		#data = json.dumps(d)
		s = self.query(data, token)
		if not s:
			return
		returndata = s["return"][0]
		for name in returndata:
			capabilities = returndata[name]
			r = Robot(name, capabilities)
			for index, robot in enumerate(self.robots):
				if robot.name == r.name:
					r.properties = robot.properties
					r.propertytimestamp = robot.propertytimestamp
					self.robots.pop(index)
					break
			self.robots.append(r)
			print(r)

		self.save("introspec")

	def show(self):
		for r in self.robots:
			if self.filter is None or r.name in self.filter:
				print(r)

	def showdetails(self, name):
		for r in self.robots:
			if r.name == name:
				print(r)
				r.printcapabilities()
				r.printproperties()
				return
		print("Error: robot not found.")

	def getproperties(self, name, token=None):
		if not token:
			token = self.login()
		if not token:
			return
		data = self.makedata("ros.mergedproperties")
		s = self.query(data, token)
		if not s:
			return
		returndata = s["return"][0]
		for name in returndata:
			for r in self.robots:
				if r.name == name:
					r.properties = returndata[name]
					r.propertytimestamp = time.time()
					r.printproperties()
					break

		self.save("getproperties")

	def pickinternal(self, conditions):
		pickedrobots = []
		condlist = []
		conditions = conditions.split(" ")
		for condition in conditions:
			for operator in ("=", "<", ">"):
				if operator in condition:
					property, value = condition.split(operator)
					condlist.append((property, operator, value))
		for r in self.robots:
			picked = True
			for p in r.properties:
				for c in condlist:
					if c[0] == p:
						#print("MATCH?", p, r.properties[p], c)
						prop = r.properties[p]
						comp = c[2]
						if type(prop) == float:
							comp = float(comp)
						elif type(prop) == int:
							comp = int(comp)
						elif type(prop) == bool:
							comp = comp in ("True", "true", "1")
						if c[1] == "=":
							if prop != comp:
								picked = False
						elif c[1] == "<":
							if prop >= comp:
								picked = False
						elif c[1] == ">":
							if prop <= comp:
								picked = False
			if picked:
				pickedrobots.append(r.name)

		return pickedrobots

	def pick(self, conditions):
		pickedrobots = self.pickinternal(conditions)
		for robot in pickedrobots:
			print(robot)
		self.filter = pickedrobots

	def call(self, func, arglist, token=None):
		if not token:
			token = self.login()
		if not token:
			return
		if not "." in func:
			func = "ros.{:s}".format(func)
		data = self.makedata(func, arglist)
		s = self.query(data, token)
		if not s:
			return
		returndata = s["return"][0]
		print(returndata)

	def push(self, filename):
		import base64

		f = open(filename)
		filecontents = f.read()
		filename = os.path.basename(filename)
		self.call("uploadmodule", [filename, filecontents])

	def servicecall(self, environ, start_response):
		import urllib.parse

		query = urllib.parse.unquote(environ["QUERY_STRING"])
		path = environ["PATH_INFO"]

		# quick hack; needs real REST framework...
		if path == "/upload":
			clength = int(environ.get("CONTENT_LENGTH", "0"))
			#uploaddata = environ["wsgi.input"].read(clength)
			#print(uploaddata)

			import cgi
			form = cgi.FieldStorage(fp=environ["wsgi.input"], environ=environ)
			#filename = form["filename"].value
			fileurl = form["fileurl"].value
			if fileurl:
				import urllib.request
				filename = os.path.basename(urllib.parse.urlparse(fileurl)[2])
				filecontents = urllib.request.urlopen(fileurl).read()
			else:
				filename = form["filecontents"].filename
				filecontents = form["filecontents"].file.read()
			self.call("uploadmodule", [filename, filecontents])

			status = "200 OK"
			headers = [("Content-type", "application/json")]
			start_response(status, headers)
			return ["ok".encode("utf-8")]
		elif path == "/":
			pickedrobots = self.pickinternal(query)

			status = "200 OK"
			headers = [("Content-type", "application/json")]
			start_response(status, headers)
			return ["\n".join(pickedrobots).encode("utf-8")]

	def service(self):
		import wsgiref.simple_server
		httpd = wsgiref.simple_server.make_server("", 11000, self.servicecall)
		httpd.serve_forever()

	def usage(self):
		print("Usage:")
		print("roboreg scan        - live-scan the network")
		print("        prop <name> - live-scan the properties of a robot")
		print("        show        - show cached results")
		print("        show <name> - show details about a robot")
		print("        pick <cond> - pick robots based on conditions: 'a=b c>d' etc.")
		print("        hist        - audit the history")
		print("        call <func> - call a function (with parameters)")
		print("        push <file> - upload a module file")
		print("        srvc        - run roboreg as a service ")

	def work(self):
		if len(sys.argv) == 1:
			self.usage()
			sys.exit(1)

		argv = sys.argv[1:]

		chain = []
		while "»" in argv:
			idx = argv.index("»")
			chain.append(argv[:idx])
			argv = argv[idx+1:]
		if argv:
			chain.append(argv)

		for argv in chain:
			self.process(argv)

	def process(self, argv):
		command = argv[0]

		if command == "scan":
			self.introspec()
		elif command == "show":
			if len(argv) == 1:
				self.show()
			elif len(argv) == 2:
				self.showdetails(argv[1])
			else:
				print("Error: invalid show argument.")
				sys.exit(1)
		elif command == "prop":
			if len(argv) == 2:
				self.getproperties(argv[1])
			else:
				print("Error: invalid prop argument.")
		elif command == "pick":
			if len(argv) == 2:
				self.pick(argv[1])
			else:
				print("Error: invalid pick argument.")
		elif command == "push":
			if len(argv) == 2:
				self.push(argv[1])
			else:
				print("Error: invalid push argument.")
		elif command == "hist":
			self.history()
		elif command == "call":
			if len(argv) >= 2:
				self.call(argv[1], argv[2:])
			else:
				print("Error: invalid call subcommand.")
				sys.exit(1)
		elif command == "srvc":
			self.service()
		else:
			print("Error: invalid command.")
			sys.exit(1)

rreg = Roboreg()
rreg.work()
