class SafeGuard:
	def __init__(self, f=None):
		from functools import partial
		import os

		self.f = f

		self.funcs = {}
		#for func in introspec():
		#	self.funcs[func] = globals()[func]
		#	globals()[func] = partial(self.guard, func)

		# FIXME: is set to /root otherwise which cannot be written to
		os.chdir("%PATH%/salt")

		self.lockdir = ".locks"
		#os.makedirs(self.lockdir, exists_ok=True) # PY3
		try:
			os.makedirs(self.lockdir)
		except:
			pass

	def guard(self, func, *args):
		import os

		lockfile = os.path.join(self.lockdir, func + ".lock")

		if os.path.isfile(lockfile):
			print("**safeguard block [{:s}]**".format(func))
			return "BLOCKED"
		open(lockfile, "w")
		print("**safeguard entry [{:s}]**".format(func))
		x = self.funcs[func](*args)
		print("**safeguard exit [{:s}]**".format(func))
		os.remove(lockfile)
		return x

	def __call__(self, *args):
		func = self.f.__name__
		self.funcs[func] = self.f
		return self.guard(func, *args)

def SafeGuardWrapper(f):
	def f_int(*args):
		sg = SafeGuard(f)
		return sg(*args)
	return f_int

@SafeGuardWrapper
def test():
	return True

@SafeGuardWrapper
def movetoposition(x, y):
	return (x, y)

@SafeGuardWrapper
def introspec():
	import os
	funcs = filter(lambda x: x[0] != "_" and x[0].islower(), globals())
	lockedfuncs = {}
	for func in funcs:
		lockdir = ".locks"
		lockfile = os.path.join(lockdir, func + ".lock")
		lockedfuncs[func] = os.path.isfile(lockfile)
	return lockedfuncs

@SafeGuardWrapper
def staticproperties():
	import yaml
	props = yaml.load(open("%PATH%/salt/modules/properties.yaml"))
	return props

@SafeGuardWrapper
def dynamicproperties():
	import time
	return {"time": time.time()}

@SafeGuardWrapper
def mergedproperties():
	d = staticproperties()
	d.update(dynamicproperties())
	return d

@SafeGuardWrapper
def uploadmodule(filename, filecontents):
	if filename == "ros.py":
		# FIXME: proper protection against overwriting this file
		filename = "invalid.py"
	f = open("%PATH%/salt/modules/" + filename, "w")
	f.write(filecontents)
	f.close()
	return True

def tail(appname):
	import os

	eventing = True

	# Do not set to any Salt logfile, as calling log will extend it
	#logfile = "%PATH%/salt/miscdir/salt-api.log"
	logfile = "/tmp/fakelog"

	# FIXME: appname is currently ignored
	os.system("touch '{:s}'".format(logfile))
	if eventing:
		import subprocess
		import json

		tail = subprocess.Popen(["tail", "-f", logfile], stdout=subprocess.PIPE)
		while True:
			line = tail.stdout.readline().split()
			qline = json.dumps(line)
			__salt__["event.send"]("ros", {"app": appname, "log": qline})
	else:
		# inspiration: salt.output.progress
		f = open(logfile)
		lines = f.readlines()
		return lines[-20:]

def safeguard():
	global _sg
	_sg = SafeGuard()

if __name__ == "__main__":
	safeguard()
	print(test())
	print(introspec())
	print(movetoposition(1, 2))
	print(staticproperties())
	print(dynamicproperties())
	print(mergedproperties())
else:
	safeguard()
